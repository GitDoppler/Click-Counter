<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(200,200)" name="Pin">
      <a name="appearance" val="classic"/>
    </comp>
    <comp lib="0" loc="(200,60)" name="Pin">
      <a name="appearance" val="classic"/>
    </comp>
    <comp lib="0" loc="(220,120)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(220,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(220,270)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(220,300)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(220,370)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(220,400)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(220,430)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(220,90)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(620,70)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(630,220)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(640,380)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp loc="(570,220)" name="up_down_counter_v2">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(570,70)" name="up_down_counter_v1">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(580,380)" name="up_down_counter_v3">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(200,200)" to="(350,200)"/>
    <wire from="(200,60)" to="(350,60)"/>
    <wire from="(220,120)" to="(350,120)"/>
    <wire from="(220,230)" to="(230,230)"/>
    <wire from="(220,270)" to="(230,270)"/>
    <wire from="(220,300)" to="(350,300)"/>
    <wire from="(220,370)" to="(230,370)"/>
    <wire from="(220,400)" to="(360,400)"/>
    <wire from="(220,430)" to="(230,430)"/>
    <wire from="(220,90)" to="(350,90)"/>
    <wire from="(230,230)" to="(230,240)"/>
    <wire from="(230,240)" to="(350,240)"/>
    <wire from="(230,260)" to="(230,270)"/>
    <wire from="(230,260)" to="(350,260)"/>
    <wire from="(230,370)" to="(230,380)"/>
    <wire from="(230,380)" to="(360,380)"/>
    <wire from="(230,420)" to="(230,430)"/>
    <wire from="(230,420)" to="(360,420)"/>
    <wire from="(350,110)" to="(350,120)"/>
    <wire from="(350,200)" to="(350,220)"/>
    <wire from="(350,280)" to="(350,300)"/>
    <wire from="(350,60)" to="(350,70)"/>
    <wire from="(570,220)" to="(630,220)"/>
    <wire from="(570,70)" to="(620,70)"/>
    <wire from="(580,380)" to="(640,380)"/>
  </circuit>
  <vhdl name="up_down_counter_v3">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity up_down_counter_v3 is
    port (
        up_clk, down_clk, reset : in std_logic;
        count_out : out std_logic_vector(3 downto 0)
    );
end up_down_counter_v3;

architecture behavioral of up_down_counter_v3 is
    signal count : unsigned(3 downto 0);
begin
    process (up_clk, down_clk, reset)
    begin
        if reset = '1' then
            count &lt;= (others =&gt; '0');
        elsif rising_edge(up_clk) or falling_edge(up_clk) then 
            count &lt;= count + 1;
            --count_out &lt;= std_logic_vector(count);
        elsif rising_edge(down_clk) or falling_edge(down_clk) then
            count &lt;= count - 1;
            --count_out &lt;= std_logic_vector(count);
        end if;
        
    end process;

    count_out &lt;= std_logic_vector(count);
    
end architecture;
</vhdl>
  <vhdl name="up_down_counter_v1">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity up_down_counter_v1 is
    Port ( clk : in STD_LOGIC;
           rst : in STD_LOGIC;
           up_down : in STD_LOGIC;
           q : out STD_LOGIC_VECTOR (3 downto 0));
end up_down_counter_v1;

architecture Behavioral of up_down_counter_v1 is
    signal count : unsigned(3 downto 0);
begin
    process(clk, rst)
    begin
        if (rst = '1') then
            count &lt;= (others =&gt; '0');
        elsif rising_edge(clk) then
            if (up_down = '1') then
                count &lt;= count + 1;
            else
                count &lt;= count - 1;
            end if;
        end if;
        q &lt;= std_logic_vector(count);
    end process;

end Behavioral;
</vhdl>
  <vhdl name="up_down_counter_v2">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity up_down_counter_v2 is
    Port ( clk : in STD_LOGIC;
           rst : in STD_LOGIC;
           left_click : in STD_LOGIC;
           right_click : in STD_LOGIC;
           q : out STD_LOGIC_VECTOR (3 downto 0));
end up_down_counter_v2;

architecture Behavioral of up_down_counter_v2 is
    signal count : unsigned(3 downto 0);
begin
    process(clk, rst, left_click, right_click)
    begin
        if (rst = '1') then
            count &lt;= (others =&gt; '0');
        elsif rising_edge(clk) then
            if (left_click = '1') then
                count &lt;= count + 1;
            elsif (right_click = '1') then
                count &lt;= count - 1;
            end if;
        end if;
        q &lt;= std_logic_vector(count);
    end process;

end Behavioral;
</vhdl>
</project>
